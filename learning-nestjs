# Topics
- [ ] Providers
- [ ] Modules
- [ ] Dependency injection 
- [ ] Exporting providers 
- [ ] Exporting modules

# Approach 
- [ ] Start by creating a new NestJS project
- [ ] Generate a resource A
- [ ] Generate resource B
- [ ] Simulate provider not found error which is caused when a provider is not part of the current module's context
- [ ] Simulate cyclic dependencies and how we can bypass it using ForwardRef (we should never do this - suggest the use of Madge to detect this in the pipeline)
- [ ] Simulate module import and export
- [ ] Simulate provider export 
- [ ] Simulate a scenario where we want to import module A into module B and forget to export a service that we are supposed to export from module A that we wanted to use in module B
- [ ] Simulate a scenario where we forget to annotate our provider with @Injectable and also make sure that this provider has managed dependencies (a provider class that has the @Injectable annotation) injected into it.
- [ ] Demonstrate custom providers 
    - [ ] Custom Factory based providers 
    - [ ] Custom Class based providers with and without tokens 
    - [ ] Custom Value based providers
    - [ ] The shortcut way for injecting a custom provider
- [ ] Demonstrate injecting providers into custom factory providers
    - [ ] Inject the Config service into a custom factory provider and read some configuration from the .env file
- [ ] Explain all the Annotations in the controller such as pipes etcâ€¦
- [ ] Demonstrate the swagger plugin 
- [ ] Demonstrate the TypeOrmModule.forFeature([Entity name])
    - [ ] Simulate a scenario where we forget to do this 
- [ ] Simulate config validation errors 
    - [ ] Scenarios:
        - [ ] 1) We forget to add the .env file 
        - [ ] 2) We add the config as a wrong type with and without config validation (using the Joi library)
- [ ] Demonstrate the config module 
- [ ] Demonstrate the config service 
    - [ ] With and without defaults 
- [ ] Demonstrate configuration partial registration 
